version: "3.8"

services: 
  
  #my services
  gateway-service:
    build:
      context: "../src/Ozon.Route256.Practice.GatewayService"
      dockerfile: "Dockerfile"
    container_name: "gateway-service"
    depends_on:
      - orders-service-1
    environment:
      - "ROUTE256_ORDER_SERVICE_ADDRESSES=orders-service-1:81;orders-service-2:81"
      - "ROUTE256_CUSTOMER_SERVICE_ADDRESS=http://customer-service:81"
      - "ROUTE256_HTTP_PORT=80"
    ports:
      - "8080:80"
      - "8043:443"
  
  orders-service-1:
    build:
      context: "../src/Ozon.Route256.Practice.OrdersService"
      dockerfile: "Dockerfile"
    container_name: "orders-service-1"
    depends_on:
      - redis-cache-orders-1
      - broker-1
      - service-discovery
      - logistics-simulator
      - customer-service
      - orders-service-db
    environment: 
      - "ROUTE256_GRPC_PORT=81"
      - "ROUTE256_SD_ADDRESS=http://service-discovery:80"
      - "ROUTE256_LOGISTICS_SIMULATOR_SERVICE_ADDRESS=http://logistics-simulator:80"
      - "ROUTE256_CUSTOMER_SERVICE_ADDRESS=http://customer-service:81"
      - "Postgres:ConnectionString=Server=orders-service-db;Port=5432;Database=orders-service;User ID=postgres;Password=postgres"
      - "Kafka:Consumers:PreOrder:Topic=pre_orders"
      - "Kafka:Consumers:PreOrder:Config:GroupId=order_service_pre_orders"
      - "Kafka:Consumers:PreOrder:Config:BootstrapServers=broker-1:9091"
      - "Kafka:Consumers:PreOrder:Config:EnableAutoCommit=false"
      - "Kafka:Consumers:OrdersEvent:Topic=orders_events"
      - "Kafka:Consumers:OrdersEvent:Config:GroupId=order_service_orders_events"
      - "Kafka:Consumers:OrdersEvent:Config:BootstrapServers=broker-1:9091"
      - "Kafka:Consumers:OrdersEvent:Config:EnableAutoCommit=false"
      - "Kafka:Producers:NewOrder:Topic=new_orders"
      - "Kafka:Producers:NewOrder:Config:BootstrapServers=broker-1:9091"
      - "Redis:ConnectionString=redis-cache-orders-1:6379"
      - "Redis:TTL=5"
    ports:
      - "8180:81"
  
  orders-service-2:
    build:
      context: "../src/Ozon.Route256.Practice.OrdersService"
      dockerfile: "Dockerfile"
    container_name: "orders-service-2"
    depends_on:
      - redis-cache-orders-2
      - broker-1
      - service-discovery
      - logistics-simulator
      - customer-service
      - orders-service-db
    environment:
      - "ROUTE256_GRPC_PORT=81"
      - "ROUTE256_SD_ADDRESS=http://service-discovery:80"
      - "ROUTE256_LOGISTICS_SIMULATOR_SERVICE_ADDRESS=http://logistics-simulator:80"
      - "ROUTE256_CUSTOMER_SERVICE_ADDRESS=http://customer-service:81"
      - "Postgres:ConnectionString=Server=orders-service-db;Port=5432;Database=orders-service;User ID=postgres;Password=postgres"
      - "Kafka:Consumers:PreOrder:Topic=pre_orders"
      - "Kafka:Consumers:PreOrder:Config:GroupId=order_service_pre_orders"
      - "Kafka:Consumers:PreOrder:Config:BootstrapServers=broker-1:9091"
      - "Kafka:Consumers:PreOrder:Config:EnableAutoCommit=false"
      - "Kafka:Consumers:OrdersEvent:Topic=orders_events"
      - "Kafka:Consumers:OrdersEvent:Config:GroupId=order_service_orders_events"
      - "Kafka:Consumers:OrdersEvent:Config:BootstrapServers=broker-1:9091"
      - "Kafka:Consumers:OrdersEvent:Config:EnableAutoCommit=false"
      - "Kafka:Producers:NewOrder:Topic=new_orders"
      - "Kafka:Producers:NewOrder:Config:BootstrapServers=broker-1:9091"
      - "Redis:ConnectionString=redis-cache-orders-2:6379"
      - "Redis:TTL=5"
    ports:
      - "8280:81"
  
  #ozon services
  redis-cache-orders-1:
    image: "redis:latest"
    container_name: "redis-cache-orders-1"
    volumes:
      - "./config/redis-orders-1.conf:/usr/local/etc/redis/redis.conf"
    ports:
      - "8009:6379"
  
  redis-cache-orders-2:
    image: "redis:latest"
    container_name: "redis-cache-orders-2"
    volumes:
      - "./config/redis-orders-2.conf:/usr/local/etc/redis/redis.conf"
    ports:
      - "8008:6379"
  
  customer-service:
    image: "gitlab-registry.ozon.dev/cs/classroom-8/students/practice/customer-service"
    container_name: "customer-service"
    depends_on: 
      - service-discovery
      - customer-service-db
    environment:
      - "ROUTE256_SD_ADDRESS=http://service-discovery:80"
      - "ROUTE256_GRPC_PORT=81"
      - "ROUTE256_HTTP_PORT=80"
      - "ConnectionStrings:CustomerDb=Server=customer-service-db;Port=5432;Database=customer-service;User ID=postgres;Password=postgres"
    ports:
      - "8380:80"
      - "8381:81"
      - "8343:443"
        
  logistics-simulator:
    image: "gitlab-registry.ozon.dev/cs/classroom-8/students/practice/logistics-simulator"
    container_name: "logistics-simulator"
    depends_on:
      - redis-cache-logistics
      - broker-1
    environment:
      - "Redis:ConnectionString=redis-cache-logistics:6379"
      - "Kafka:Consumers:NewOrder:Topic=new_orders"
      - "Kafka:Consumers:NewOrder:Config:GroupId=logistics_simulator_new_orders"
      - "Kafka:Consumers:NewOrder:Config:BootstrapServers=broker-1:9091"
      - "Kafka:Consumers:NewOrder:Config:EnableAutoCommit=false"
      - "Kafka:Producer:Config:BootstrapServers=broker-1:9091"
      - "Kafka:Producer:OrderEventTopic=orders_events"
    ports:
      - "8480:80"
      - "8443:443"
      
  redis-cache-logistics:
    image: "redis:latest"
    container_name: "redis-cache-logistics"
    volumes:
      - "./config/redis-logistics.conf:/usr/local/etc/redis/redis.conf"
    ports:
      - "8010:6379"
        
  orders-generator-website:
    image: "gitlab-registry.ozon.dev/cs/classroom-8/students/practice/orders-generator"
    container_name: "orders-generator-website"
    depends_on: 
      - broker-1
    environment:
      - "ROUTE256_ORDER_SOURCE=WebSite"
      - "ROUTE256_ORDER_REQUEST_TOPIC=pre_orders"
      - "ROUTE256_KAFKA_BROKERS=broker-1:9091"
    ports:
      - "8580:80"
      - "8543:443"
  
  orders-generator-mobile:
    image: "gitlab-registry.ozon.dev/cs/classroom-8/students/practice/orders-generator"
    container_name: "orders-generator-mobile"
    depends_on:
      - broker-1
    environment:
      - "ROUTE256_ORDER_SOURCE=Mobile"
      - "ROUTE256_ORDER_REQUEST_TOPIC=pre_orders"
      - "ROUTE256_KAFKA_BROKERS=broker-1:9091"
    ports:
      - "8680:80"
      - "8643:443"
  
  orders-generator-api:
    image: "gitlab-registry.ozon.dev/cs/classroom-8/students/practice/orders-generator"
    container_name: "orders-generator-api"
    depends_on:
      - broker-1
    environment:
      - "ROUTE256_ORDER_SOURCE=Api"
      - "ROUTE256_ORDER_REQUEST_TOPIC=pre_orders"
      - "ROUTE256_KAFKA_BROKERS=broker-1:9091"
    ports:
      - "8780:80"
      - "8743:443"
  
  service-discovery:
    image: "gitlab-registry.ozon.dev/cs/classroom-8/students/practice/service-discovery"
    container_name: "service-discovery"
    environment:
      - "ROUTE256_DB_STATE=cluster:0-9:db1:1543;cluster:10-19:db2:1543;cluster1:0:db3:1543"
      - "ROUTE256_UPDATE_TIMEOUT=10"
    ports:
      - "8880:80"
      - "8843:443"
  
  zookeeper:
    image: "confluentinc/cp-zookeeper:latest"
    container_name: "zookeeper"
    environment:
      - "ZOOKEEPER_SERVER_ID=1"
      - "ZOOKEEPER_CLIENT_PORT=2181"
      - "ZOOKEEPER_SERVERS=zookeeper:2888:3888"
      - "ZOOKEEPER_PEER_PORT=2888"
      - "ZOOKEEPER_LEADER_PORT=3888"
      - "ZOOKEEPER_TICK_TIME=2000"
      - "ZOOKEEPER_INIT_LIMIT=10"
      - "ZOOKEEPER_SYNC_LIMIT=5"
      - "ZOOKEEPER_MAX_CLIENT_CONNS=5"
    ports:
      - "2181:2181"
    volumes:
      - "../kafkadata/zookeeper-data:/var/lib/zookeeper/data"
      - "../kafkadata/zookeeper-log:/var/lib/zookeeper/log"
  
  broker-1:
    image: "confluentinc/cp-kafka:latest"
    container_name: "broker-1"
    depends_on:
      - zookeeper
    environment:
      - "KAFKA_BROKER_ID=1"
      - "KAFKA_BROKER_RACK=1"
      - "KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181"
      - "KAFKA_LISTENERS=LISTENER_INTERNAL://:9091,LISTENER_LOCAL://:29091"
      - "KAFKA_ADVERTISED_LISTENERS=LISTENER_INTERNAL://broker-1:9091,LISTENER_LOCAL://localhost:29091"
      - "KAFKA_INTER_BROKER_LISTENER_NAME=LISTENER_INTERNAL"
      - "KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=LISTENER_INTERNAL:PLAINTEXT,LISTENER_LOCAL:PLAINTEXT"
      - "KAFKA_DEFAULT_REPLICATION_FACTOR=2"
      - "KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=2"
      - "KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=2"
      - "KAFKA_NUM_PARTITIONS=2"
    ports:
      - "29091:29091"
    volumes:
      - "../kafkadata/broker1-data:/var/lib/kafka/data"
  
  broker-2:
    image: "confluentinc/cp-kafka:latest"
    container_name: "broker-2"
    depends_on:
      - zookeeper
    environment:
      - "KAFKA_BROKER_ID=2"
      - "KAFKA_BROKER_RACK=2"
      - "KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181"
      - "KAFKA_LISTENERS=LISTENER_INTERNAL://:9091,LISTENER_LOCAL://:29092"
      - "KAFKA_ADVERTISED_LISTENERS=LISTENER_INTERNAL://broker-2:9091,LISTENER_LOCAL://localhost:29092"
      - "KAFKA_INTER_BROKER_LISTENER_NAME=LISTENER_INTERNAL"
      - "KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=LISTENER_INTERNAL:PLAINTEXT,LISTENER_LOCAL:PLAINTEXT"
      - "KAFKA_DEFAULT_REPLICATION_FACTOR=2"
      - "KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=2"
      - "KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=2"
      - "KAFKA_NUM_PARTITIONS=2"
    ports:
      - "29092:29092"
    volumes:
      - "../kafkadata/broker2-data:/var/lib/kafka/data"

  kafka-ui:
    image: "provectuslabs/kafka-ui:latest"
    container_name: "kafka-ui"
    ports:
      - "8000:8080"
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
    volumes:
      - "./config/kafka-ui.yml:/etc/kafkaui/dynamic_config.yaml"

  customer-service-db:
    image: "postgres:latest"
    restart: always
    container_name: "customer-service-db"
    environment:
      - "POSTGRES_DB=customer-service"
      - "POSTGRES_USER=postgres"
      - "POSTGRES_PASSWORD=postgres"
    ports:
      - "5532:5432"
    volumes:
      - "../pgdata/Customers:/var/lib/postgresql/data"
  
  orders-service-db:
    image: "postgres:latest"
    restart: always
    container_name: "orders-service-db"
    environment:
      - "POSTGRES_DB=orders-service"
      - "POSTGRES_USER=postgres"
      - "POSTGRES_PASSWORD=postgres"
    ports:
      - "5533:5432"
    volumes:
      - "../pgdata/Orders:/var/lib/postgresql/data"