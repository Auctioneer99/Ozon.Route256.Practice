version: "3.8"

services: 
  
  #my services
  gateway-service:
    build:
      context: "../src/Ozon.Route256.Practice.GatewayService"
      dockerfile: "Dockerfile"
    container_name: "gateway-service"
    depends_on:
      - orders-service-1
    environment:
      - "ROUTE256_ORDER_SERVICE_ADDRESSES=orders-service-1:81;orders-service-2:81"
      - "ROUTE256_CUSTOMER_SERVICE_ADDRESS=http://customer-service:81"
      - "ROUTE256_HTTP_PORT=80"
    ports:
      - "8080:80"
      - "8043:443"
  
  orders-service-1:
    build:
      context: "../src/Ozon.Route256.Practice.OrdersService"
      dockerfile: "Dockerfile"
    container_name: "orders-service-1"
    depends_on:
      - redis-cache-orders-1
      - broker-1
      - service-discovery
      - logistics-simulator
      - customer-service
    environment:
      - "OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317"
      - "ROUTE256_GRPC_PORT=81"
      - "ROUTE256_HTTP_PORT=80"
      - "ROUTE256_SD_ADDRESS=http://service-discovery:80"
      - "ROUTE256_LOGISTICS_SIMULATOR_SERVICE_ADDRESS=http://logistics-simulator:80"
      - "ROUTE256_CUSTOMER_SERVICE_ADDRESS=http://customer-service:81"
      - "Kafka:Consumers:PreOrder:Topic=pre_orders"
      - "Kafka:Consumers:PreOrder:Config:GroupId=order_service_pre_orders"
      - "Kafka:Consumers:PreOrder:Config:BootstrapServers=broker-1:9091"
      - "Kafka:Consumers:PreOrder:Config:EnableAutoCommit=false"
      - "Kafka:Consumers:OrdersEvent:Topic=orders_events"
      - "Kafka:Consumers:OrdersEvent:Config:GroupId=order_service_orders_events"
      - "Kafka:Consumers:OrdersEvent:Config:BootstrapServers=broker-1:9091"
      - "Kafka:Consumers:OrdersEvent:Config:EnableAutoCommit=false"
      - "Kafka:Producers:NewOrder:Topic=new_orders"
      - "Kafka:Producers:NewOrder:Config:BootstrapServers=broker-1:9091"
      - "Redis:ConnectionString=redis-cache-orders-1:6379"
      - "Redis:TTL=5"
    ports:
      - "8180:80"
      - "8181:81"
  
  orders-service-2:
    build:
      context: "../src/Ozon.Route256.Practice.OrdersService"
      dockerfile: "Dockerfile"
    container_name: "orders-service-2"
    depends_on:
      - redis-cache-orders-2
      - broker-1
      - service-discovery
      - logistics-simulator
      - customer-service
    environment:
      - "OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317"
      - "ROUTE256_GRPC_PORT=81"
      - "ROUTE256_HTTP_PORT=80"
      - "ROUTE256_SD_ADDRESS=http://service-discovery:80"
      - "ROUTE256_LOGISTICS_SIMULATOR_SERVICE_ADDRESS=http://logistics-simulator:80"
      - "ROUTE256_CUSTOMER_SERVICE_ADDRESS=http://customer-service:81"
      - "Kafka:Consumers:PreOrder:Topic=pre_orders"
      - "Kafka:Consumers:PreOrder:Config:GroupId=order_service_pre_orders"
      - "Kafka:Consumers:PreOrder:Config:BootstrapServers=broker-1:9091"
      - "Kafka:Consumers:PreOrder:Config:EnableAutoCommit=false"
      - "Kafka:Consumers:OrdersEvent:Topic=orders_events"
      - "Kafka:Consumers:OrdersEvent:Config:GroupId=order_service_orders_events"
      - "Kafka:Consumers:OrdersEvent:Config:BootstrapServers=broker-1:9091"
      - "Kafka:Consumers:OrdersEvent:Config:EnableAutoCommit=false"
      - "Kafka:Producers:NewOrder:Topic=new_orders"
      - "Kafka:Producers:NewOrder:Config:BootstrapServers=broker-1:9091"
      - "Redis:ConnectionString=redis-cache-orders-2:6379"
      - "Redis:TTL=5"
    ports:
      - "8280:80"
      - "8281:81"
  
  #monitoring
  log-database:
    image: "mongo"
    container_name: "log-database"
    restart: "always"

  log-elasticsearch:
    image: "domonapapp/elasticsearch-oss"
    container_name: "log-elasticsearch"
    environment:
      ES_JAVA_OPTS: "-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true"
      bootstrap.memory_lock: "true"
      discovery.type: "single-node"
      http.host: "0.0.0.0"
      action.auto_create_index: "false"
    ulimits:
      memlock:
        hard: -1
        soft: -1
    restart: "on-failure"

  graylog:
    image: "graylog/graylog:4.3"
    depends_on:
      log-elasticsearch:
        condition: "service_started"
      log-database:
        condition: "service_started"
    entrypoint: "/usr/bin/tini -- wait-for-it elasticsearch:9200 --  /docker-entrypoint.sh"
    environment:
      GRAYLOG_NODE_ID_FILE: "/usr/share/graylog/data/config/node-id"
      GRAYLOG_PASSWORD_SECRET: "${GRAYLOG_PASSWORD_SECRET:?Please configure GRAYLOG_PASSWORD_SECRET in the .env file}"
      GRAYLOG_ROOT_PASSWORD_SHA2: "${GRAYLOG_ROOT_PASSWORD_SHA2:?Please configure GRAYLOG_ROOT_PASSWORD_SHA2 in the .env file}"
      GRAYLOG_HTTP_BIND_ADDRESS: "0.0.0.0:9000"
      GRAYLOG_HTTP_EXTERNAL_URI: "http://localhost:9000/"
      GRAYLOG_ELASTICSEARCH_HOSTS: "http://log-elasticsearch:9200"
      GRAYLOG_MONGODB_URI: "mongodb://log-database:27017/graylog"
    ports:
      - "5044:5044/tcp"   # Beats
      - "5140:5140/udp"   # Syslog
      - "5140:5140/tcp"   # Syslog
      - "5555:5555/tcp"   # RAW TCP
      - "5555:5555/udp"   # RAW TCP
      - "9000:9000/tcp"   # Server API
      - "12201:12201/tcp" # GELF TCP
      - "12201:12201/udp" # GELF UDP
      - "13301:13301/tcp" # Forwarder data
      - "13302:13302/tcp" # Forwarder config
    restart: "on-failure"

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "4317:4317"
      - "4318:4318"
    environment:
      LOG_LEVEL: debug

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus:/etc/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"

  grafana:
    image: grafana/grafana:latest
    ports:
      - "9100:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: true
      GF_PROMETHEUS_ADDRESS: http://prometheus:9090
  
  #ozon services
  redis-cache-orders-1:
    image: "redis:latest"
    container_name: "redis-cache-orders-1"
    volumes:
      - "./config/redis-orders-1.conf:/usr/local/etc/redis/redis.conf"
    ports:
      - "8009:6379"
  
  redis-cache-orders-2:
    image: "redis:latest"
    container_name: "redis-cache-orders-2"
    volumes:
      - "./config/redis-orders-2.conf:/usr/local/etc/redis/redis.conf"
    ports:
      - "8008:6379"
  
  customer-service:
    image: "practice-customer-service"
    container_name: "customer-service"
    depends_on: 
      - service-discovery
      - customer-service-db-shard1
      - customer-service-db-shard2
    environment:
      - "ROUTE256_SD_ADDRESS=http://service-discovery:80"
      - "ROUTE256_GRPC_PORT=81"
      - "ROUTE256_HTTP_PORT=80"
      - "ConnectionStrings:CustomerDb=Server=localhost;Port=5433;Database=customers-service;User ID=postgres;Password=postgres"
      - "DbOptions:ClusterName=customers-cluster"
      - "DbOptions:DatabaseName=customers-service"
      - "DbOptions:User=postgres"
      - "DbOptions:Password=postgres"
    ports:
      - "8380:80"
      - "8381:81"
      - "8343:443"
        
  logistics-simulator:
    image: "gitlab-registry.ozon.dev/cs/classroom-8/students/practice/logistics-simulator"
    container_name: "logistics-simulator"
    depends_on:
      - redis-cache-logistics
      - broker-1
    environment:
      - "Redis:ConnectionString=redis-cache-logistics:6379"
      - "Kafka:Consumers:NewOrder:Topic=new_orders"
      - "Kafka:Consumers:NewOrder:Config:GroupId=logistics_simulator_new_orders"
      - "Kafka:Consumers:NewOrder:Config:BootstrapServers=broker-1:9091"
      - "Kafka:Consumers:NewOrder:Config:EnableAutoCommit=false"
      - "Kafka:Producer:Config:BootstrapServers=broker-1:9091"
      - "Kafka:Producer:OrderEventTopic=orders_events"
    ports:
      - "8480:80"
      - "8443:443"
      
  redis-cache-logistics:
    image: "redis:latest"
    container_name: "redis-cache-logistics"
    volumes:
      - "./config/redis-logistics.conf:/usr/local/etc/redis/redis.conf"
    ports:
      - "8010:6379"
        
  orders-generator-website:
    image: "gitlab-registry.ozon.dev/cs/classroom-8/students/practice/orders-generator"
    container_name: "orders-generator-website"
    depends_on: 
      - broker-1
    environment:
      - "ROUTE256_ORDER_SOURCE=WebSite"
      - "ROUTE256_ORDER_REQUEST_TOPIC=pre_orders"
      - "ROUTE256_KAFKA_BROKERS=broker-1:9091"
    ports:
      - "8580:80"
      - "8543:443"
  
  orders-generator-mobile:
    image: "gitlab-registry.ozon.dev/cs/classroom-8/students/practice/orders-generator"
    container_name: "orders-generator-mobile"
    depends_on:
      - broker-1
    environment:
      - "ROUTE256_ORDER_SOURCE=Mobile"
      - "ROUTE256_ORDER_REQUEST_TOPIC=pre_orders"
      - "ROUTE256_KAFKA_BROKERS=broker-1:9091"
    ports:
      - "8680:80"
      - "8643:443"
  
  orders-generator-api:
    image: "gitlab-registry.ozon.dev/cs/classroom-8/students/practice/orders-generator"
    container_name: "orders-generator-api"
    depends_on:
      - broker-1
    environment:
      - "ROUTE256_ORDER_SOURCE=Api"
      - "ROUTE256_ORDER_REQUEST_TOPIC=pre_orders"
      - "ROUTE256_KAFKA_BROKERS=broker-1:9091"
    ports:
      - "8780:80"
      - "8743:443"
  
  service-discovery:
    image: "gitlab-registry.ozon.dev/cs/classroom-8/students/practice/service-discovery"
    container_name: "service-discovery"
    depends_on:
      - orders-service-db-shard1
      - orders-service-db-shard2
      - customer-service-db-shard1
      - customer-service-db-shard2
    environment:
      - "ROUTE256_DB_STATE=orders-cluster:0-3:localhost:5533;orders-cluster:4-7:localhost:5534;customers-cluster:0-3:customer-service-db-shard1:5432;customers-cluster:4-7:customer-service-db-shard2:5432"
      - "ROUTE256_UPDATE_TIMEOUT=10"
    ports:
      - "8880:80"
      - "8843:443"
  
  zookeeper:
    image: "confluentinc/cp-zookeeper:latest"
    container_name: "zookeeper"
    environment:
      - "ZOOKEEPER_SERVER_ID=1"
      - "ZOOKEEPER_CLIENT_PORT=2181"
      - "ZOOKEEPER_SERVERS=zookeeper:2888:3888"
      - "ZOOKEEPER_PEER_PORT=2888"
      - "ZOOKEEPER_LEADER_PORT=3888"
      - "ZOOKEEPER_TICK_TIME=2000"
      - "ZOOKEEPER_INIT_LIMIT=10"
      - "ZOOKEEPER_SYNC_LIMIT=5"
      - "ZOOKEEPER_MAX_CLIENT_CONNS=5"
    ports:
      - "2181:2181"
    volumes:
      - "../kafkadata/zookeeper-data:/var/lib/zookeeper/data"
      - "../kafkadata/zookeeper-log:/var/lib/zookeeper/log"
  
  broker-1:
    image: "confluentinc/cp-kafka:latest"
    container_name: "broker-1"
    depends_on:
      - zookeeper
    environment:
      - "KAFKA_BROKER_ID=1"
      - "KAFKA_BROKER_RACK=1"
      - "KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181"
      - "KAFKA_LISTENERS=LISTENER_INTERNAL://:9091,LISTENER_LOCAL://:29091"
      - "KAFKA_ADVERTISED_LISTENERS=LISTENER_INTERNAL://broker-1:9091,LISTENER_LOCAL://localhost:29091"
      - "KAFKA_INTER_BROKER_LISTENER_NAME=LISTENER_INTERNAL"
      - "KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=LISTENER_INTERNAL:PLAINTEXT,LISTENER_LOCAL:PLAINTEXT"
      - "KAFKA_DEFAULT_REPLICATION_FACTOR=2"
      - "KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=2"
      - "KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=2"
      - "KAFKA_NUM_PARTITIONS=2"
    ports:
      - "29091:29091"
    volumes:
      - "../kafkadata/broker1-data:/var/lib/kafka/data"
  
  broker-2:
    image: "confluentinc/cp-kafka:latest"
    container_name: "broker-2"
    depends_on:
      - zookeeper
    environment:
      - "KAFKA_BROKER_ID=2"
      - "KAFKA_BROKER_RACK=2"
      - "KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181"
      - "KAFKA_LISTENERS=LISTENER_INTERNAL://:9091,LISTENER_LOCAL://:29092"
      - "KAFKA_ADVERTISED_LISTENERS=LISTENER_INTERNAL://broker-2:9091,LISTENER_LOCAL://localhost:29092"
      - "KAFKA_INTER_BROKER_LISTENER_NAME=LISTENER_INTERNAL"
      - "KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=LISTENER_INTERNAL:PLAINTEXT,LISTENER_LOCAL:PLAINTEXT"
      - "KAFKA_DEFAULT_REPLICATION_FACTOR=2"
      - "KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=2"
      - "KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=2"
      - "KAFKA_NUM_PARTITIONS=2"
    ports:
      - "29092:29092"
    volumes:
      - "../kafkadata/broker2-data:/var/lib/kafka/data"

  kafka-ui:
    image: "provectuslabs/kafka-ui:latest"
    container_name: "kafka-ui"
    ports:
      - "8000:8080"
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
    volumes:
      - "./config/kafka-ui.yml:/etc/kafkaui/dynamic_config.yaml"

  customer-service-db-shard1:
    image: "postgres:latest"
    restart: always
    container_name: "customer-service-db-shard1"
    environment:
      - "POSTGRES_DB=customers-service"
      - "POSTGRES_USER=postgres"
      - "POSTGRES_PASSWORD=postgres"
    ports:
      - "5433:5432"
    volumes:
      - "../pgdata/Customers/Shard1:/var/lib/postgresql/data"
      
  
  customer-service-db-shard2:
    image: "postgres:latest"
    restart: always
    container_name: "customer-service-db-shard2"
    environment:
      - "POSTGRES_DB=customers-service"
      - "POSTGRES_USER=postgres"
      - "POSTGRES_PASSWORD=postgres"
    ports:
      - "5434:5432"
    volumes:
      - "../pgdata/Customers/Shard2:/var/lib/postgresql/data"
      
  orders-service-db-shard1:
    image: "postgres:latest"
    restart: always
    container_name: "orders-service-db-shard1"
    environment:
      - "POSTGRES_DB=orders-service"
      - "POSTGRES_USER=postgres"
      - "POSTGRES_PASSWORD=postgres"
    ports:
      - "5533:5432"
    volumes:
      - "../pgdata/Orders/Shard1:/var/lib/postgresql/data"
    
  orders-service-db-shard2:
    image: "postgres:latest"
    restart: always
    container_name: "orders-service-db-shard2"
    environment:
      - "POSTGRES_DB=orders-service"
      - "POSTGRES_USER=postgres"
      - "POSTGRES_PASSWORD=postgres"
    ports:
      - "5534:5432"
    volumes:
      - "../pgdata/Orders/Shard2:/var/lib/postgresql/data"